How to build a metrics platform.


Chapters
What is Metrics Platform
- What are metrics?
- Where are metrics used? 
- The pumping heart
- Pyramid

Concepts
- Understanding Time: trigger, self heal, backfill, UTC, strictness: partial, none. Silent topics.
- Understanding Frequency: daily, intraday, incremental, self dependency
- Understanding Aggregations: additive, distinct, percentile, topk, tdigest, hll
- Understanding dimensions. Product vs. Event. Joining with standard dimensions
- Understanding other functions: Retention, ACL, Compliance, Metadata, GDPR, PII, where is my data, distcp
- Infra: Compute, Storage and Orchestration systems, Spark, Hive, Presto, Pinot, Druid, Airflow, AZ

For Authors: Self Serve Usage
- What is Self Serve
- From Testing to Deployment
- Dev and testing: validata
- After Deployment: Managing changes and Backfills
- After Deployment: alerts, notifications, watchers, handling failures, failure insights, failure diagnostics in JIRA, Slack, logs debugging
- User interfaces: backfill portal, wimd, understandability, 
- Platform vs. Personal responsibility
- Analytics, growth trends, cost attributions

For Consumers: metric
- Discovery and metadata
- Metrics page, Duplication

Acheiving Governance
- "Principles of UMP Governance" https://docs.google.com/document/d/1DlwtY6ovBSXED6dYVcF4HaVHcf1ky40uhuVmsCc_k_o/edit#heading=h.2b6em12wuqfr
- Organization: Domains, buckets, subject areas, 
- Ownership: reviewers, owners, operational owner, watchers
- Metric tier and priority. Importance vs. Reliability.
- Hygiene, lifecycle, duplicates, deprecate metrics

Acheiving Data Quality
- Data quality assertions
- Validata
- Anomalies

Acheiving Reliability
- multi-grid
- recovery, disaster, active-active
- flow tuning
- headless accounts
- super user privilege for the platform
- schema changes
- support, ask_metrics
- backfill should not compete with daily flow
- lineage
- horizontal initiatives

Principles of the Metrics Platform
- Program to interfaces not implementations
- Four rules of declarative
- Treat code like 
- Declarative config files

Implementation Recommendations
- Config file
- Flow builder
- what do you need to monitor
- chunked execution (selfheal and backfill)
- dark canary as a service, other infra can test using your platform
- Empty output from script: error or ok?

Best Practices
- "UMP Principles": https://docs.google.com/document/d/10maKjDPp05hlX2dAERQBJUdTxRms4df-IIH87SQSbx0/edit
- Don't do pageviews_ios
- Use standard UDFs and dimension tables 
- Duplicated logic because of missing dimensions 
- Duplicated logic for efficiency reasons 
- Ensure traceability to primary sources (tracking, SOT databases)
- Clear ownership - we require that datasets/subject areas have clear owners

------------------------------

- cascading backfill
- lineage
- Recovery, Disaster recovery, active-active
- 

** Time: range, window and delay.
- If the flow is running today, which date partitions are generated. Which partitions of inputs are needed.
- Which input partitions are needed? Delay and range.


